（详见笔记）
1、PyTorch autograd使用教程
2、PyTorch中如何进行向量微分、矩阵微分与计算雅克比行列式
3、如何在PyTorch中训练模型
(1)、准备数据，构建模型
(2)、设置超参数的值
(3)、设置目标函数
(4)、构建优化器，对参数进行更新
(5)、完整实现
def train_loop(dataloader, model, loss_fn, optimizer):
    size=len(dataloader.dataset)
    for batch, (X,y) in enumerate(dataloader):
        # Compute prediction and loss
        pred=model(X)
        loss=loss_fn(pred,y)
        
        #Backpropagation
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        if batch % 100 == 0:
            loss,current=loss.item(),batch*len(X)
            print(f"loss:{loss:>7f} [{current:>5d}/{size:>5d}]")

def test_loop(dataloader,model,loss_fn):
    size=len(dataloader.dataset)
    num_batches=len(dataloader)
    test_loss, correct=0,0
    
    with torch.no_grad():
        for X, y in dataloader:
            pred=model(X)
            test_loss += loss_fn(pred,y).item()
            correct += (pred.argmax(1) == y).type(torch.float).sum().item()
            
    test_loss /= num_batches
    correct /= size
    print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")